// Messages for Faiss searching services.
syntax = "proto3";

package faiss;

import "google/protobuf/empty.proto";

// Single instance of Faiss searching results.
message Neighbor {
    // ID of neighbor's id.
    uint64 id = 1;
    // Score of metric. This value depends on which metrics (typically L2 distance, Inner Product and so on) you used to build index.
    float score = 2;
}

// Wrapper message for list of float32. This keeps compatible for vectors used on Faiss.
message Vector {
    // The query vector for searching. Dimension must be same as subscribed vectors in index.
    repeated float val = 1;
}

// Request for searching by query vector.
message SearchRequest {
    // The query vector for searching. Dimension must be same as subscribed vectors in index.
    Vector query = 1;
    // How many results (neighbors) you want to get.
    uint64 k = 2;
}

// Response of searching by query vector.
message SearchResponse {
    // Neighbors of given query.
    repeated Neighbor neighbors = 1;
}

// Request for searching by ID.
message SearchByIdRequest {
    // The ID for searching.
    uint64 id = 1;
    // How many results (neighbors) you want to get.
    uint64 k = 2;
}

// Response of searching by ID.
message SearchByIdResponse {
    // The requested ID.
    uint64 request_id = 1;
    // Neighbors of given ID. Requested ID is excluded.
    repeated Neighbor neighbors = 2;
}

// Response of heatbeat.
message HeatbeatResponse {
    // Return OK if server is working.
    string message = 1;
}

service FaissService {
    // Check server is working.
    rpc Heatbeat (google.protobuf.Empty) returns (HeatbeatResponse);
    // Search neighbors from query vector.
    rpc Search(SearchRequest) returns (SearchResponse);
    // Search neighbors from ID.
    rpc SearchById(SearchByIdRequest) returns (SearchByIdResponse);
}
